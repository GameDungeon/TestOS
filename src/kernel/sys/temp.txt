#include <stdint.h>
#include "gdt.h"

static struct gdt_entry gdt[3];
static struct gdt_ptr gp;

static void gdt_set_gate(int32_t number, uint32_t base, uint32_t limit, uint8_t access, uint8_t granularity)
{
    gdt[number].base_low = (base & 0xFFFF);
    gdt[number].base_mid = (base >> 16) & 0xFF;
    gdt[number].base_high = (base >> 24) & 0xFF;
    gdt[number].limit_low = (limit & 0xFFFF);
    gdt[number].granularity = (limit >> 16) & 0x0F;
    gdt[number].granularity |= granularity & 0xF0;
    gdt[number].access = access;
}

void gdt_flush() {
    asm volatile(
        "lgdt %0\n\t"     
        "mov ax, 0x10\n\t" // 0x10 is the offset in the GDT to our data segment
        "mov ds, ax\n\t"
        "mov es, ax\n\t"
        "mov fs, ax\n\t"
        "mov gs, ax\n\t"
        "mov ss, ax\n\t"
        "pushq 0x08\n\t"   // new code segment selector
        "pushq flush2\n\t" // function to execute next
        "retfq\n\t"
        "flush2:\n\t"
        :
        : "m"(gp)
        :);
}

void gdt_init()
{
    /* Setup the GDT pointer and limit */
    gp.limit = (sizeof(struct gdt_entry) * 5) - 1;
    gp.base = (uint64_t)&gdt;

    gdt_set_gate(0, 0, 0x00000000, 0x00, 0x00);
    gdt_set_gate(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);
    gdt_set_gate(2, 0, 0xFFFFFFFF, 0x92, 0xCF);
}

